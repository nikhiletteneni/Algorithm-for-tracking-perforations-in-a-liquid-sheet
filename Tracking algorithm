function trackingwithcurvefitequationr23eq()
srcFile=dir('F:\final experiments\20 mpas\250 Re 3.550 bar both fishbone and perforations\C001H001S0001\test one perforation 1\tracking\*.tif'); %for total no of images in folder
noofframes=length(srcFile)  %total no of frames
tracks = initializeTracks(); % Create an empty array of tracks.
nextId = 1; % ID of the next track
%importing detections data
cents=load('centroiddata.mat');
areainfo=load('areadata.mat');
majoraxisinfo=load('majoraxisdata.mat');                   
minoraxisinfo=load('minoraxisdata.mat');
perimeterinfo=load('perimeterdata.mat');
eccentricityinfo=load('eccentricitydata.mat');

% Detect moving objects, and track them across video frames.
for framenumber =1:noofframes
    frame = readFrame(framenumber);
    framenumber
    centroids = cents.datacent{framenumber};
    centroids=unique(centroids,'rows','stable');
    bboxes = [centroids repmat([1 1],size(centroids,1),1)];
    predictNewLocationsOfTracks();
    [assignments, unassignedTracks, unassignedDetections] = ...
        detectionToTrackAssignment();
    updateAssignedTracks();
    updateUnassignedTracks();
    deleteLostTracks();
    createNewTracks();
    displayTrackingResults(framenumber);
end

function frame = readFrame(framenumber)
    srcFile='F:\final experiments\20 mpas\250 Re 3.550 bar both fishbone and perforations\C001H001S0001\test one perforation 1\tracking/';
    x=[srcFile 'anaone ' '(' ,num2str(framenumber),')' '.tif'];
    frame = imread(x);
end

function tracks = initializeTracks()
        % create an empty array of tracks
        tracks = struct(...
            'id', {}, ...
            'centroid',{},...
            'kalmanFilter', {}, ...
            'bbox',{},...
            'age', {}, ...
            'totalVisibleCount', {}, ...
            'consecutiveInvisibleCount', {});
end

function predictNewLocationsOfTracks()
    for i = 1:length(tracks)

        % Predict the current location of the track.
        predictedCentroid = predict(tracks(i).kalmanFilter);

        % Shift the bounding box so that its center is at the predicted location.
        tracks(i).centroid =predictedCentroid;
    end
end


  function [assignments, unassignedTracks, unassignedDetections] = detectionToTrackAssignment()

        nTracks = length(tracks);
        nDetections = size(centroids, 1);

        % Compute the cost of assigning each detection to each track.
        cost = zeros(nTracks, nDetections);
        for i = 1:nTracks
            cost(i, :) = distance(tracks(i).kalmanFilter, centroids);
        end

        % Solve the assignment problem.
        costOfNonAssignment = 6.5;
        [assignments, unassignedTracks, unassignedDetections] = assignDetectionsToTracks(cost, costOfNonAssignment);
  end

  function updateAssignedTracks()
        numAssignedTracks = size(assignments, 1);
        for i = 1:numAssignedTracks
            trackIdx = assignments(i, 1);
            detectionIdx = assignments(i, 2);
            centroid = centroids(detectionIdx, :);
            
            % Correct the estimate of the object's location using the new detection.
            correct(tracks(trackIdx).kalmanFilter, centroid);

            % Replace predicted bounding box with detected bounding box.
            tracks(trackIdx).bbox = [centroid 1 1];

            % Update track's age.
            tracks(trackIdx).age = tracks(trackIdx).age + 1;

            % Update visibility.
            tracks(trackIdx).totalVisibleCount = ...
                tracks(trackIdx).totalVisibleCount + 1;
            tracks(trackIdx).consecutiveInvisibleCount = 0;
        end
  end


  function updateUnassignedTracks()
        for i = 1:length(unassignedTracks)
            ind = unassignedTracks(i);
            tracks(ind).age = tracks(ind).age + 1;
            tracks(ind).consecutiveInvisibleCount = ...
                tracks(ind).consecutiveInvisibleCount + 1;
        end
  end


  function deleteLostTracks()
        if isempty(tracks)
            return;
        end

        invisibleForTooLong = 1;
        ageThreshold = 2;

        % Compute the fraction of the track's age for which it was visible.
        ages = [tracks(:).age];
        totalVisibleCounts = [tracks(:).totalVisibleCount];
        visibility = totalVisibleCounts ./ ages;

        % Find the indices of 'lost' tracks.
        lostInds = (ages < ageThreshold & visibility < 0.7) | ...
            [tracks(:).consecutiveInvisibleCount] >= invisibleForTooLong;

        % Delete lost tracks.
        tracks = tracks(~lostInds);
  end


  function createNewTracks()
        centroids = centroids(unassignedDetections, :);
        bboxes = bboxes(unassignedDetections, :);
        for i = 1:size(centroids, 1) 

            centroid = centroids(i,:);
            bbox = bboxes(i,:);

            % Create a Kalman filter object.
            kalmanFilter = configureKalmanFilter('ConstantVelocity', ...
                centroid, [200, 50], [100, 25], 100);

            % Create a new track.
            newTrack = struct(...
                'id', nextId, ... 
                'centroid',centroids,...
                'kalmanFilter', kalmanFilter, 'bbox', bbox,...
                'age', 1, ...
                'totalVisibleCount', 1, ...
                'consecutiveInvisibleCount', 0);

            % Add it to the array of tracks.
            tracks(end + 1) = newTrack;

            % Increment the next id.
            nextId = nextId + 1;
        end
  end


function displayTrackingResults(framenumber)
       minVisibleCount = 1;
        if ~isempty(tracks)

            % Noisy detections tend to result in short-lived tracks.
            % Only display tracks that have been visible for more than a minimum number of frames.
            reliableTrackInds = ...
            [tracks(:).totalVisibleCount] > minVisibleCount;
            reliableTracks = tracks(reliableTrackInds);

            % Display the objects. If an object has not been detected
            % in this frame, display its predicted bounding box.
            if ~isempty(reliableTracks)
                % Get bounding boxes.
                bboxes = cat(1,reliableTracks.bbox);
                
                centdataload=cents.datacent{framenumber};  
                areastore=areainfo.dataarea{framenumber};
                majoraxisstore=majoraxisinfo.datamajoraxis{framenumber};
                minoraxisstore=minoraxisinfo.dataminoraxis{framenumber};
                eccentricitystore=eccentricityinfo.dataeccentricity{framenumber};
                perimeterstore=perimeterinfo.dataperimeter{framenumber};%Loading centroid data of a particular frame
                [centloadunique,uniqueindices]=unique(centdataload,'rows','stable');  %getting unique array along with indices
                centfromtrack=bboxes(:,1:end-2);    %centrooid data from tracking results
               centfromtrackunique=unique(centfromtrack,'rows','stable');
  count3=1; 
for m=1:length(uniqueindices)
    indicesstore(count3)=uniqueindices(m);
    count3=count3+1;
end

    count1=1;
for i6=1:size(centfromtrack,1)
    for i5=1:size(indicesstore,2)
        i7=indicesstore(i5);

        if (centfromtrackunique(i6,1)-(centdataload(i7,1))+(centfromtrackunique(i6,2))-centdataload(i7,2))==0
            finalcentdata(count1,:)=centdataload(i7,:);
            finalareadata(count1)= areastore(i7);
            finalmajoraxisdata(count1)=majoraxisstore(i7);
            finalminoraxisdata(count1)=minoraxisstore(i7);
            finaleccentricitystore(count1)=eccentricitystore(i7);
            finalperimeterstore(count1)=perimeterstore(i7);
            count1=count1+1;

        end
    end
end

                ids = int32([reliableTracks(:).id]);
                
                % Create labels for objects indicating the ones for
                % which we display the predicted rather than the actual location.
                labels = cellstr(int2str(ids'));

ids = double(ids);
indexareadata{framenumber}=cat(2,ids',finalareadata');
indexcentdata{framenumber}=cat(2,ids',finalcentdata);
indexeccentricitydata{framenumber}=cat(2,ids',finaleccentricitystore');
t=table(ids',finalcentdata,finalareadata',finalmajoraxisdata', finalminoraxisdata',finaleccentricitystore',finalperimeterstore');
ft = ModelAdvisor.FormatTemplate('TableTemplate');
setTableTitle(ft, 'Table of fonts and styles used in model');
t.Properties.VariableNames = {'Label_No','Centroid', 'Area',  'MajorAxis_length','MinorAxis_length','Eccentricity','Perimeter'}

 figure,imshow(mat2gray(frame))
 impixelinfo;
 title(strcat('Frame',num2str(framenumber)));
hold on
for i3=1:size(bboxes,1)
    c(1) = bboxes(i3,1);
    c(2) = bboxes(i3,2);
    count1 = ids(i3);
    text(c(1), c(2), sprintf('%d', count1),'color','r', 'FontSize',10, 'HorizontalAlignment', 'center','VerticalAlignment', 'middle')
end
indexnum=count1;
    hold off              
          end

        end
end
end
